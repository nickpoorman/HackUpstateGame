{
  "name": "forms",
  "description": "An easy way to create, parse, and validate forms",
  "main": "./index",
  "author": {
    "name": "Caolan McMahon"
  },
  "version": "0.1.4",
  "repository": {
    "type": "git",
    "url": "http://github.com/caolan/forms.git"
  },
  "bugs": {
    "url": "http://github.com/caolan/forms/issues"
  },
  "scripts": {
    "test": "node test.js"
  },
  "dependencies": {
    "async": "~0.1.22"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/caolan/forms/raw/master/LICENSE"
    }
  ],
  "devDependencies": {
    "nodeunit": "~0.7.4"
  },
  "readme": "# Forms\n\nConstructing a good form by hand is a lot of work. Popular frameworks like\nRuby on Rails and Django contain code to make this process less painful.\nThis module is an attempt to provide the same sort of helpers for node.js.\n\n    npm install forms\n\n## Contribute\n\nThis code is still in its infancy, and I'd really appreciate any contributions,\nbug reports, or advice. Especially on the following key areas:\n\n* __Creating sensible default rendering functions that generate flexible,\n  accessible markup__. This is an early priority because without being\n  confident that the standard markup won't change under their feet, developers\n  will not be able to adopt the module for any sort of production use.\n* __Exploring write-once validation that works on the client and the server__.\n  There are some unique advantages to using the same language at both ends,\n  let's try and make the most of it!\n* __Ensuring it's easy to use with existing node web frameworks__. Ideally this\n  module would integrate well with projects using any of the popular frameworks.\n### Contributors\n\n* [luddep](http://github.com/luddep)\n* [jedp](https://github.com/jedp)\n* [ljharb](https://github.com/ljharb)\n\n\n## Example\n\nCreating an example registration form:\n\n    var forms = require('forms'),\n        fields = forms.fields,\n        validators = forms.validators;\n\n    var reg_form = forms.create({\n        username: fields.string({required: true}),\n        password: fields.password({required: true}),\n        confirm:  fields.password({\n            required: true,\n            validators: [validators.matchField('password')]\n        }),\n        email: fields.email()\n    });\n\nRendering a HTML representation of the form:\n\n    reg_form.toHTML();\n\nWould produce:\n\n    <div class=\"field required\">\n        <label for=\"id_username\">Username</label>\n        <input type=\"text\" name=\"username\" id=\"id_username\" value=\"test\" />\n    </div>\n    <div class=\"field required\">\n        <label for=\"id_password\">Password</label>\n        <input type=\"password\" name=\"password\" id=\"id_password\" value=\"test\" />\n    </div>\n    <div class=\"field required\">\n        <label for=\"id_confirm\">Confirm</label>\n        <input type=\"password\" name=\"confirm\" id=\"id_confirm\" value=\"test\" />\n    </div>\n    <div class=\"field\">\n        <label for=\"id_email\">Email</label>\n        <input type=\"text\" name=\"email\" id=\"id_email\" />\n    </div>\n\nYou'll notice you have to provide your own form tags and submit button, its\nmore flexible this way ;)\n\nHandling a request:\n\n    function myView(req, res) {\n\n        reg_form.handle(req, {\n            success: function (form) {\n                // there is a request and the form is valid\n                // form.data contains the submitted data\n            },\n            error: function (form) {\n                // the data in the request didn't validate,\n                // calling form.toHTML() again will render the error messages\n            },\n            empty: function (form) {\n                // there was no form data in the request\n            }\n        });\n\n    }\n\nThat's it! For more detailed / working examples look in the example folder.\nAn example server using the form above can be run by doing:\n\n    node example/simple.js\n\n## Available types\n\nA list of the fields, widgets, validators and renderers available as part of\nthe forms module. Each of these components can be switched with customised\ncomponents following the same API.\n\n### Fields\n\n* string\n* number\n* boolean\n* array\n* password\n* email\n* url\n\n### Widgets\n\n* text\n* password\n* hidden\n* color\n* checkbox\n* select\n* textarea\n* multipleCheckbox\n* multipleRadio\n* multipleSelect\n\n### Validators\n\n* matchField\n* min\n* max\n* range\n* minlength\n* maxlength\n* rangelength\n* regexp\n* color\n* email\n* url\n\n### Renderers\n\n* div\n* p\n* li\n* table\n\n\n## API\n\nA more detailed look at the methods and attributes available. Most of these\nyou will not need to use directly.\n\n### forms.create(fields)\nConverts a form definition (an object literal containing field objects) into a\nform object.\n\n\n### Form object\n\n#### Attributes\n\n* fields - Object literal containing the field objects passed to the create\n  function\n\n#### form.handle(req, callbacks)\nInspects a request or object literal and binds any data to the correct fields.\n\n#### form.bind(data)\nBinds data to correct fields, returning a new bound form object.\n\n#### form.toHTML(iterator)\nRuns toHTML on each field returning the result. If an iterator is specified,\nit is called for each field with the field name and object as its arguments,\nthe iterator's results are concatenated to create the HTML output, allowing\nfor highly customised markup.\n\n\n### Bound Form object\n\nContains the same methods as the unbound form, plus:\n\n#### Attributes\n\n* data - Object containing all the parsed data keyed by field name\n* fields - Object literal containing the field objects passed to the create\n  function\n\n#### form.validate(callback)\nCalls validate on each field in the bound form and returns the resulting form\nobject to the callback.\n\n#### form.isValid()\nChecks all fields for an error attribute. Returns false if any exist, otherwise\nreturns true.\n\n#### form.toHTML(iterator)\nRuns toHTML on each field returning the result. If an iterator is specified,\nit is called for each field with the field name and object as its arguments,\nthe iterator's results are concatenated to create the HTML output, allowing\nfor highly customised markup.\n\n\n### Field object\n\n#### Attributes\n\n* label - Optional label text which overrides the default\n* required - Boolean describing whether the field is mandatory\n* validators - An array of functions which validate the field data\n* widget - A widget object to use when rendering the field\n* id - An optional id to override the default\n* choices - A list of options, used for multiple choice fields\n* cssClasses - A list of CSS classes for label and field wrapper\n\n#### field.parse(rawdata)\n\nCoerces the raw data from the request into the correct format for the field,\nreturning the result, e.g. '123' becomes 123 for the number field.\n\n#### field.bind(rawdata)\n\nReturns a new bound field object. Calls parse on the data and stores in the\nbound field's data attribute, stores the raw value in the value attribute.\n\n#### field.errorHTML()\n\nReturns a string containing a HTML element containing the fields error\nmessage, or an empty string if there is no error associated with the field.\n\n#### field.labelText(name)\n\nReturns a string containing the label text from field.label, or defaults to\nusing the field name with underscores replaced with spaces and the first\nletter capitalised.\n\n#### field.labelHTML(name, id)\n\nReturns a string containing a label element with the correct 'for' attribute\ncontaining the text from field.labelText(name).\n\n#### field.classes()\n\nReturns an array of default CSS classes considering the field's attributes,\ne.g. ['field', 'required', 'error'] for a required field with an error message.\n\n#### field.toHTML(name, iterator)\n\nCalls the iterator with the name and field object as arguments. Defaults to\nusing forms.render.div as the iterator, which returns a HTML representation of\nthe field label, error message and widget wrapped in a div.\n\n### Bound Field object\n\n_same as field object, but with a few extensions_\n\n#### Attributes\n\n* value - The raw value from the request data\n* data - The request data coerced to the correct format for this field\n* error - An error message if the field fails validation\n\n#### validate(callback)\n\nChecks if the field is required and whether it is empty. Then runs the\nvalidator functions in order until one fails or they all pass. If a validator\nfails, the resulting message is stored in the field's error attribute.\n\n\n### Widget object\n\n#### Attributes\n\n* classes - Custom classes to add to the rendered widget\n* type - A string representing the widget type, e.g. 'text' or 'checkbox'\n\n#### toHTML(name, field)\n\nReturns a string containing a HTML representation of the widget for the given\nfield.\n\n\n### Validator\n\nA function that accepts a bound form, bound field and a callback as arguments.\nIt should apply a test to the field to assert its validity. Once processing\nhas completed it must call the callback with no arguments if the field is\nvalid or with an error message if the field is invalid.\n\n\n### Renderer\n\nA function which accepts a name and field as arguments and returns a string\ncontaining a HTML representation of the field.\n",
  "readmeFilename": "README.md",
  "_id": "forms@0.1.4",
  "dist": {
    "shasum": "6c51ffc620036be2e32fc3dc94f6dbbecde19a8a"
  },
  "_from": "forms@~0.1.4",
  "_resolved": "https://registry.npmjs.org/forms/-/forms-0.1.4.tgz"
}
